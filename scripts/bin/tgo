#!/usr/bin/env python


import argparse
import datetime
import os
import pathlib
import subprocess
import time
from tqdm import tqdm

parser = argparse.ArgumentParser(description='Run DSE go tests in parallel')

parser.add_argument('-o', dest='out', default='logs', help='Output path to use for logs')
parser.add_argument('-v', dest='verbose', action='store_true', default=False, help='Verbose mode')
parser.add_argument('-r', dest='race', action='store_true', default=False, help='Check for race conditions')
parser.add_argument('-P', dest='num_workers', type=int, default=1, help='Number of parallel tests')
parser.add_argument('-n', dest='iter', default=100, type=int, help='Number of iterations to run')
parser.add_argument(dest='tests', nargs='*', default=None, help="Test(s) to run")


class color:
    MAGENTA     = '\033[95m'
    CYAN        = '\033[96m'
    DARKCYAN    = '\033[36m'
    BLUE        = '\033[94m'
    GREEN       = '\033[92m'
    ORANGE      = '\033[93m'
    RED         = '\033[91m'
    BOLD        = '\033[1m'
    UNDERLINE   = '\033[4m'
    END         = '\033[0m'


if __name__ == '__main__':
    args = parser.parse_args()
    start = time.time()
    N = args.iter
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    out = pathlib.Path(args.out) / timestamp
    max_processes = args.num_workers
    print(color.MAGENTA + f"Saving logs to {out}" + color.END)

    for test in args.tests:

        failed = []
        print(f"Running test {color.BOLD} {test} for {N} iterations with {max_processes} workers" + color.END)

        testpath = out / test
        testpath.mkdir(parents=True, exist_ok=True)

        assigned = 0
        failed = []

        with tqdm(total=N) as pbar:

            while assigned < N:

                processes = []

                for j in range(assigned, min(assigned+max_processes, N)):
                    with open(testpath / f"{j}.txt", 'w') as f:
                        test_cmd = ['go', 'test', f'-run={test}']
                        if args.race:
                            test_cmd.append('-race')

                        p = subprocess.Popen(test_cmd, stdout=f, stderr=f)
                    processes.append((j, p))

                assigned += len(processes)

                [p.wait() for j, p in processes]

                failed_now = [j for j, p in processes if p.returncode != 0]
                failed.extend(failed_now)

                if args.verbose:
                    for j in failed_now:
                        print(color.ORANGE + f"Test {test} failed at iteration {j}" + color.END)

                pbar.update(len(processes))

        fail = len(failed)
        if fail == 0:
            print(color.GREEN + f"Test {test} PASSED consistently!" + color.END)
        else:
            print(color.RED + f"Test {test} FAILED {fail}/{N} times" + color.END)
            with open(testpath / "failed.txt", 'w') as f:
                f.writelines([f"{i}.txt\n" for i in sorted(failed)])

    m = len(args.tests)
    totaltime = time.time() - start
    print(color.BOLD + f"Completed {m} tests in {totaltime:.2f} seconds" + color.END)
